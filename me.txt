                                        Lập trình WordPress

Cài đặt Wordpress và công cụ lập trình
    Create new Database with name: wordpress
    https://wordpress.org/download/
    Download wordpress-5.5.1.zip and unzip, then copy to C:\xampp\htdocs\wordpress
    C:\Windows\System32\drivers\etc\hosts
        127.0.0.1       wordpress.xyz
    C:\xampp\apache\conf\extra\httpd-vhosts.conf
        <VirtualHost *:80>
            ServerAdmin wordpress.xyz
            DocumentRoot "C:/xampp/htdocs/wordpress"
            ServerName wordpress.xyz
            ErrorLog "logs/wordpress.xyz-error.log"
            CustomLog "logs/wordpress.xyz-access.log" common
        </VirtualHost>
    Browser access http://wordpress.xyz/wp-admin/setup-config.php
    Language: English 
    ↓
    Database name: wordpress
    Database username: root
    Database password:
    Database host: localhost
    Table prefix: wp_
    ↓
    Information needed
    Site Title: Lap trinh WordPress
    Username: admin
    Password: 123456
    Confirm use of weak password
    Your Email: vudinhquangk53@gmail.com
    Search engine visibility
    -> Install 
    ↓
    Login with Username: admin and Password: 123456
    Will be entry http://wordpress.xyz/wp-admin/
    Thay đổi giao diện cho Visit Site
        Appearance -> Themes -> Add New -> Popular 
        Twenty Ten -> Install -> Active
    Lap trinh WordPress -> Visit Site -> Will be entry http://wordpress.xyz/ and see that Twenty Ten will be display 
Cấu trúc và cấu hình nâng cao của Wordpress
    Wp-config 01
        Cấu trúc thư mục và các tập tin
        Có 3 thư mục chính: 
            /wp-admin
            /wp-content
            /wp-includes
        Có 2 tập tin trong thư mục gốc giúp chúng ta thiết lập các giá trị cấu hình cho WP đó là tập tin: 
            wp-config.php
            .htaccess
        Thay đổi thư mục chứa tập tin wp-config.php
            C:\xampp\htdocs\wordpress\wp-config.php
            C:\xampp\htdocs\wp-config.php
            Khi hệ thống wordpress không tìm thất tập tin wp-config.php nằm trong cùng thư mục với nó thì hệ thống sẽ tìm 
                ra thư mục ngoài 1 cấp -> điều này giúp bảo mật đường dẫn của wp-config.php
    Wp-config 02
        Thiết lập tiền tố cho các bảng trong database WP
            $table_prefix  = 'wp_';
        Thay đổi URL chạy chính của WP
            define( 'WP_SITEURL', 'http://wordpress.xyz' );
            define( 'WP_HOME', 'http://wordpress.xyz' );
            http://wordpress.xyz/wp-admin/options-general.php(Admin)
                -> Settings
            WordPress Address (URL): Đường dẫn đến thư mục
            Site Address (URL): Đường dẫn khi truy cập trên Browser
            ↓
            Sẽ bị disable và người dùng sẽ không thể thay đổi giá trị được 
    Wp-config 03
        Thay đổi đường dẫn đến thư mục chứa Plugin
        define( 'WP_PLUGIN_DIR', dir(__FILE__) . '/wp-content/plugins');
        define( 'WP_PLUGIN_URL', 'http://wordpress.xyz/wp-content/plugins');
        Thay đổi giá trị của WP_POST_REVISIONS
            REVISIONS lưu lại các bài viết trước đó mà mình đã chỉnh sửa, có thể back về các 
                bài viết trước đó
            SELECT * FROM wordpress.wp_posts;
                post_content    post_title      post_status
                    ~           Hello world!    publish
                    ~           Hello world!    inherit
                publish là thể hiện giá trị đang hiển thị hiện tại, inherit là đang nằm ở REVISIONS để
                    mình có thể quay ngược lại
            define( 'WP_POST_REVISIONS', false ); -> Tắt chế độ lưu lại các Version trước đó của bài viết
            define( 'WP_POST_REVISIONS', 3 ); -> Tối đa lưu lại 3 lần
    Wp-config 04
        Thay đổi giá trị thời gian cho AUTOSAVE_INTERVAL
            define( 'AUTOSAVE_INTERVAL', 150 ); Thời gian lưu 1 bài viết khi thêm mới or Edit, mặc định là 60s
        Hiển thị các câu truy vấn trên một trang của WP
            define( 'SAVEQUERIES', true );
        Hiển thị chi tiết các câu truy vấn trên trang
            global $wpdb;
            print_r( $wpdb->queries );
        Plugin and Active to check
            function debug() {
                global $wpdb;
                echo '<pre>';
                print_r($wpdb->queries );
                echo '</pre>';
            }
            add_action('wp_footer', 'debug');
        Tăng bộ nhớ cho ứng dụng WP
            Trong quá trình vận hành 1 hệ thống bất kỳ bằng PHP thì có những lúc sẽ gặp thông báo:
                Allowed memory size of xxxxx bytes exhausted
                -> Ứng dụng đã vượt khỏi bộ nhớ cho phép của Server
            define( 'WP_MEMORY_LIMIT', '128M' );
                -> Bộ nhớ tối đa mà WordPress sẽ sử dụng là 128M 
                Giá trị được thiết lập này thì còn phụ thuộc vào cả cấu hình Server
                Đối với tập tin php.ini giá trị memory_limit=512M thì giá trị WP_MEMORY_LIMIT được 
                    thiết lập lớn hơn 512M thì cũng không có tác dụng 
        Thiết lập ngôn ngữ và định dạng quốc tế, giá trị mặc định là 'en-US'
            define ( 'WPLANG', 'en-US' );
        Thiết lập thư mục chứa các tập tin ngôn ngữ
            Default: define( 'LANGDIR', '/wp-content/languages' );
            Custom: define( 'LANGDIR', '/wp-content/my/languages' ); 
        Chia sẽ dữ liệu người dùng (Multisite) cho nhiều trang web liên kết với nhau
            define( 'CUSTOM_USER_TABLE', 'share_users' );
            define( 'CUSTOM_USER_META_TABLE', 'share_usermeta' );
            -> Hai bẳng này dùng để chia sẻ thông tin qua lại giữa các website với nhau
        Thiết lập COOKIE cho nhiều domain (Multisite) cho nhiều trang web liên kết với nhau
            define( 'COOKIE_DOMAIN', '.domain.com' );
            define( 'COOKIEPATH', '/' );
            define( 'SITECOOKIEPATH', '/' );
        Thiết lập tài khoản FTP cho website
            Khi upload 1 tập tin nào đó cho website nhưng có những tập tin rất lớn thì nó sẽ ko cho upload 
                thông qua Browser mà lúc này cần sử dụng đến cấu hình của tài khoản FTP để upload file liên
                Server
            define( 'FTP_USER', 'username' );
            define( 'FTP_PASS', 'password' );
            define( 'FTP_HOST', 'ftp.example.com:21' );
        Cấu hình thư mục FTP và SSH 
            -> Liên quan đến Hosting khi upload lên internet
            define( 'FS_METHOD', 'ftpext' );
            define( 'FTP_BASE', '/public_html/wordpress/' );
            define( 'FTP_CONTENT_DIR', '/public_html/wordpress/wp-content/' );
            define( 'FTP_PLUGIN_DIR ', '/ public_html /wordpress/wp-content/plugins/' );
            define( 'FTP_PUBKEY', '/home/username/.ssh/id_rsa.pub' );
            define( 'FTP_PRIVKEY', '/home/username/.ssh/id_rsa' );
            define( 'FTP_SSL', false );
        Thiết lập cấp phép cho thư mục
            define( 'FS_CHMOD_FILE',0644 );
            define( 'FS_CHMOD_DIR',0755 );
        Thiết lập Cache nâng cao
            define( 'WP_CACHE', true ); 
            wp-content/advanced-cache.php
        Thiết lập chế độ login
            Khi user login thì có sử dụng đường dẫn trên thanh địa chỉ là HTTPS hay không, mặc định 
                là false có nghĩa là chỉ sử dụng đường dẫn thường, có địa chỉ là HTTP 
            define( 'FORCE_SSL_LOGIN', true ); //HTTPS - HTTP
            define( 'FORCE_SSL_ADMIN', true );
        Thiết lập thời gian xóa TRASH
            Thiết lập time xóa đi các tập tin nằm trong thư mục trash
            define( 'EMPTY_TRASH_DAYS', 7 ); 
        Thiết lập chế độ Cron
            define( 'DISABLE_WP_CRON', true );
        Thiết lập giá trị không chỉnh sửa trong Admin
            Thiết lập giá trị TRUE thì link Edit trong các Plugin sẽ biến mất
            define('DISALLOW_FILE_EDIT', TRUE); 
Plugin In WordPress
    Plugin 01
        Download Plugin tại www.wordpress.org
        Wordpress API 
            http://codex.wordpress.org/WordPress_APIs
        Các nhóm API trong WP
            Plugin API
                Cung 1 tập hợp các Hook, để gắn các plugins vào và mở rộng hệ thống ra
                Có 2 loại Hook khác nhau: Action Hook và Filter Hook 
                Action Hook cho phép kích hoạt các mã Plugin, bổ xung tại các vị trí cụ thể trong quá trình
                    vận hành của WordPress
                Filter Hook Cho phép thay đổi nội dung của bài viết trước khi đưa vào Database của WordPress hoặc 
                    sau khi hệ thống lấy dữ liệu từ trong database ra, có thể thay đổi nội dung đó trước khi hiển 
                    thị trên trình duyệt  
            Widgets API
                Hỗ trợ tạo ra các Widgets nằm trên website
            Shortcode API 
                Là 1 đoạn mã ngắn sử dụng cho posts and pages.
            HTTP API
                Giúp nhận dữ liệu hoặc gửi dữ liệu từ website của mình đến website khác
            Settings API 
                Tập hợp các hàm hỗ trợ việc thiết lập các giá trị
            Options API
                Tập hợp các phương thức để lưu dữ liệu vào bảng wp_options
            Dashboard Widgets API
                Là các phương thức tạo ra các khối trong trang Dashboard của phần Admin
            Rewrite AIP
                Hỗ trợ trong quá trình thay đổi đường dẫn trên thanh địa chỉ
                Settings -> Permalink
                (Plain) http://wordpress.xyz/?p=123
            Transients API
                Tạo ra dữ liệu tạm lưu sẵn vào trong hệ thống để giảm tải quá trình xử lý dữ liệu của hệ thống WordPress
                    và làm cho website chạy nhanh hơn
            Database API
            Và một số nhóm khác
    Plugin 02
        Vị trí Plugin được load trong quá trình xử lý
            Wordpress URL 　　 → 　　 wp-config Loaded 　　→ 　 Functions Loaded
                                    　　　　　　　　　　　    　　　　↓
            Translations Loaded　←　　Pluggables Loaded　　←　　Plugins Loaded
            　　↓　
            Theme Loaded　　→　　Page Content
            Wordpress URL: Gõ địa chỉ để truy cập đến 1 website được xây dựng trên hệ thống mã nguồn mở của WordPress 
            wp-config Loaded : Load các cấu hình nằm ở trong file config, load các cấu hình nằm ở trong Database của WordPress
            Functions Loaded: Gọi các hàm xử lý chính trong lõi của WordPress
            Plugins Loaded: Lạp toàn bộ các Plugin của nó vào hệ thống, giai đoạn này là thực hiện đưa các plugins vào hệ thống 
                nhưng các plugins đó chưa hoạt động. Các Plugin này chỉ hoạt động khi hệ thống WordPress gọi đến các Action Hook 
                hay các Filter Hook
            Pluggables Loaded: Nạp các phương thức nằm trong tập tin mã nguồn của WordPress(wordpress\wp-includes\pluggable.php)
                Trong tập tin này chứa các phương thức mà mình có thể override lại
            Translations Loaded: Nạp phần ngôn ngữ cũng như định dạng của các quốc gia
            Theme Loaded: Load Theme mà mình mặc định trong hệ thống WordPress, đưa các dữ liệu đã xử xong vào trong Theme đó
            Page Content: Gửi đên trình duyệt Web cho người dùng
        Quản lý và cài đặt Plugin
            Truy cập Admin Site
            Chọn Plugins menu 
            Chọn Installed Plugins
        Plugin Directory 
            http://wordpress.org/extend/plugins/
Xây dựng Plugin căn bản
    Create plugin
        Tạo một thư mục để chứa plugin mới để dễ dàng nâng cấp và bổ xung thêm chức năng trong tương lai
        Không nên có khoảng trắng và dấu gạch dưới trong tên của thư mục
        Khi chúng ta tạo một Plugin để trách bị trùng tên chúng ta nên tạo ra một tiền tố cho Plugin mới
        Cách tạo tiền tố: <tên bạn>_<tên plugin>_
        Ví dụ: ZendVN tạo Shopping plugin vậy tiền tố sẽ là: zendvn_sp_
        Nên sử dụng tiền tố này cho các biến và hàm trong Plugin của mình
    Structure plugin
        /unique-plugin-name
            unique-plugin-name.php — Tập tin PHP chạy chính của Plugin
            uninstall.php — Tập tin uninstall plugin
            /js — Thư mục chứa các tâp tin JavaScript
            /css — Thư mục chứa các tâp tin stylesheet 
            /includes — Thư mục chứa các tâp tin PHP khác
            /images — Thư mục chứa các tâp tin hình ảnh của plugin
        Header Plugin là yêu cầu duy nhất với Plugin để nó hoạt động trong WordPress 
            <?php
            /*
            Plugin Name: ZendVN MyPlugin
            Plugin URI: http://www.zend.vn
            Description: Tim hieu ve qua trinh chuan xay dung Plugin.
            Author: ZendVN group
            Version: 1.0
            Author URI: http://www.zend.vn
            */
    Path 
        Đường dẫn tuyệt đối (Local path): 
            Là đường dẫn vật lý  đến các tập tin và thư mục trên máy của chúng ta (VD: C:\window)
            Khi nhúng các tập tin php vào trong 1 tập tin nào đó thì sẽ sử dụng đường dẫn tuyệt đối
        Đường dẫn tương đối (URL path): 
            Là đường dẫn mà người sử dụng truy cập vào máy chủ của chúng ta thông qua các trình duyệt web
            Khi nhúng các tập tin như css, js, images vào trong 1 tập tin nào đó thì sử dụng đường dẫn 
                tương đối
            plugin_dir_path( ) – đường dẫn vật lý thư mục /plugins
                plugin_dir_path( __FILE__);
            plugins_url() - đường dẫn URL thư mục /plugins 
                plugins_url("css/abc.css", __FILE__);
            includes_url() - đường dẫn URL đến thư mục /wp-includes
                includes_url("css/buttons.css");
            content_url() - đường dẫn URL đến thư mục /wp-content
            admin_url() - đường dẫn URL đến thư mục  /wp-admin 
            site_url() - Đường dẫn URL của website 
            home_url() - Đường dẫn URL home của website
    Active plugin 1
        Cú pháp:
            register_activation_hook( $file, $function ); 
            Thực hiện chạy các hành động trong quá trình kích hoạt plugin đó
        Các thông số: 
            $file - (string) (bắt buộc) - Đường dẫn đến tập tin chính của Plugin
            $function - (string) (yêu cầu) - Tên hàm, hàm này sẽ thực hiện khi plugin được kích hoạt.
        Chức năng chính của Active plugin
            Tạo các giá trị mặc định và lưu vào bảng _option trong database của WP. 
            Tạo các bảng mới trong database để chứa các dữ liệu Plugin bạn tạo ra.
        add_option( $option, $value = , $deprecated = , $autoload = 'yes' );
            Chỉ thêm giá trị vào trong bảng wp_options khi option_name chưa tồn tại trong bảng wp_options
            serialize() Chuyển mảng thành chuỗi
            unserialize() Chuyển chuỗi thành mảng
    Active plugin 2
    Deactive plugin
        Cú pháp:
            register_ deactivation_hook( $file, $function ); 
            Tạo ra hành động nào đó trong quá trình vô hiệu hóa Plugin
        Các thông số: 
            $file - (string) (bắt buộc) - Đường dẫn đến tập tin chính của Plugin
            $function - (string) (yêu cầu) - Tên hàm, hàm này sẽ thực hiện khi plugin được vô hiệu hóa.
        Chức năng chính của Deactive plugin
            Hàm này sẽ vô hiệu hóa Plugin của bạn
            Thay đổi một số giá trị trong bảng wp_options (nếu thực sự cần thiết)
            Có thể không cần gọi hàm này nếu bạn thực sự không làm điều gì trong quá trình vô hiệu hóa plugin
        Trong trường hợp khi kích hoạt 1 plugin mà đưa vào 1 số tham số mặc định cho plugin của mình vào bảng wp_options
            Ở Active plugin trên đã đưa vào 'zendvn_mp_version' và 'zendvn_mp_options' khi đó giá trị của autoload là 'yes'.
            Khi hệ thống WordPress chạy nó sẽ load các giá trị nằm trong cột option_value lên. Trong trường hợp mà tắt Plugin
            đó rồi mà các giá trị option_value vẫn load thì sẽ làm tốn tài nguyên.
            -> Giải pháp là chuyển giá trị của autoload thành 'no' khi Deactive, khi Active thì chuyển là 'yes' 
    Uninstall plugin
        Khi thực hiện Delete Plugin nào đó thì sự kiện Uninstall sẽ được kích hoạt
        Cú pháp:
            register_uninstall_hook( $file, $function ); 
        Các thông số: 
            $file - (string) (required) - Đường dẫn đến tập tin chính của Plugin. 
            $function - (string) (required) - Hàm để thực thi khi Plugin được gỡ bỏ
        Thực hiện các nhiệm vụ khi chúng ta xóa Plugin ra khỏi hệ thống: 
            Xóa các giá trị mặc định đã lưu vào bảng _option trong database. 
            Xóa các bảng đã tạo trong database trong quá trình cài đặt Plugin của bạn.
            Hệ thống WP sẽ giúp bạn xóa thư mục Plugin của bạn
        Có 2 cách để thực hiện trong quá trình uninstall plugin
            Sử dụng register_uninstall_hook()
            Sử dụng uninstall.php; 
        Cách viết mã chuẩn trong WP
            http://make.wordpress.org/core/handbook/coding-standards/php/
            http://make.wordpress.org/core/handbook/coding-standards/html/
            http://make.wordpress.org/core/handbook/coding-standards/css/
            http://make.wordpress.org/core/handbook/coding-standards/javascript/
Hook Action
    Add_action 1
        Hook
            Hook giúp chúng ta gắn một số chức năng để thực thi những hành động mà chúng ta muốn mà không phải đụng 
                vào bất cứ thứ gì ở trong core của WP.
            Plugin chỉ có một cách duy nhất là tương tác với Hook để thay đổi cách quá trình xử lý của WP. 
            Hook cũng được sử dụng trong Core của WP
            WordPress có 2 kiểu Hook chính: Action hook và Filter hook. 
        Có 2 loại action Hook Action hook:
            Một loại Action Hook sẽ phụ thuộc vào giao diện sử dụng
            Một loại phụ thuộc vào luồng xử lý của WordPress
        Action
            Action là một hàm được viết bằng PHP trong Plugin
            Gắn Action vào hệ thống WP thông qua hàm có sẳn add_action() 
            Action được viết ra để thực hiện một điều gì đó với hệ thống WP
            Xác định vị trí (Hook) để gắn Action đã viết của chúng ta 
        Gắn Action vào Hook
            Để gắn một Action vào một vị trí (hook) nào đó chúng ta sẽ sử dụng hàm: 
                add_action( $tag, $function, $priority, $accepted_args );
            Tham số:
            $tag -  Là tên của một 'action hook'  của WP (hơn 600 Hooks)
                -> Xác định vị trí (Hook) để gắn Action đã viết của chúng ta
            $function - Tên Action mà bạn viết để tương tác vào hệ thống
            $priority – Độ ưu tiên của Action
            $accepted_args - Số lượng các tham số truy action hook sẽ được truyền vào hàm của bạn. 
            Nếu add 1 hàm 2 lần vào trong 1 action Hook nào đó có cùng độ ưu tiên thì nó chỉ thực thi 1 lần, 
                độ ưu tiên khác nhau thì sẽ thực hiện 2 lần 
    Add_action 2
    Remove, remove_all, has_action
        Để loại bỏ một Action ra khỏi một vị trí (hook) nào đó chúng ta sẽ sử dụng hàm: 
            remove_action( $tag, $function_to_remove, $priority,$accepted_args );
        Tham số:
            $tag -  Là tên của một 'action hook' của WP (hơn 600 Hooks)
            $function - Tên Action mà bạn viết để tương tác vào hệ thống
            $priority – Độ ưu tiên của Action
            $accepted_args - Số lượng các tham số truy action hook sẽ được truyền vào hàm của bạn.
        Sử dụng hàm loại bỏ Action
            Để loại bỏ một Action bất kỳ ra khỏi một vị trí (hook) kể cả Action đã có sẵn trong hệ thống WP
            Hàm remove_action() phải được sử dụng sau hàm add_action() thì mới có tác dụng
            Nhiều trong số các action mặc định của WP được định nghĩa trong tập tin:
                wp-includes/default-filters.php
                Trong tập tin này chứa các Action được chạy khi hệ thống WordPress được khởi động lên.
                -> Vẫn có thể loại bỏ được 
        Loại bỏ tất cả Action
            Để loại bỏ tất cả Action ra khỏi một vị trí (hook) nào đó chúng ta sẽ sử dụng hàm: 
                remove_all_actions( $tag, $priority );
            Tham số:
                $tag -  Tên của action hook
                $priority - Độ ưu tiên của action để loại bỏ.
        Kiểm tra sự tồn tại Action trong Hook
            Để kiểm tra sự tồn tại của Action trong một Action Hook nào đó chúng ta sử dụng hàm 
                has_action( $tag, $function_to_check );
            Tham số:
                $tag -  Tên của action hook
                $function_to_check - Tên của một hàm để kiểm tra xem nó có đã thêm vào hook chưa.
            Trả về giá trị độ ưu tiên cửa action đó trong Hook
        Các Action Hook thường sử dụng
            plugins_loaded
            init: Được kích hoạt sau khi WordPress được thiết lập
            admin_menu: Hook này được gọi khi tải menu trong phần admin lên
            template_redirect
            wp_head
    Create Action Hook
        Vì nhu cầu của website chúng ta cần tạo ra một Action Hook mới
        Các Action Hook mới thường được gắn vào theme đang được sử dụng
        Chúng ta sẽ phải sử dụng 2 hàm có  sẵn trong WP: là add_action() và do_action() để xây dựng Action Hook mới này.
        do_action() Thực hiện hành động đã được thêm vào trong 1 Action Hook nào đó
        Tạo một Action Hook mới trong Plugin
            add_action('new_action_hook', 'new_action_callback');
            function new_action_callback()
            {
                echo '<p>Khoa hoc lap trinh Wordpress tai ZendVN</p>';
            }
            function new_action_hook()
            {
                do_action('new_action_hook');
            }
        Nhúng Action Hook mới vào theme đang sử dụng
            Mở tập tin /wp-content/themes/twentyten/footer.php thêm vào 1 trong 2 dòng sau:
            <?php the_new_action(); ?>
            <?php do_action('new_action_hook'); ?>
        Tạo một Action Hook mới trong Plugin
            add_action('new_action_hook', 'new_action_callback',20,2);
            function new_action_callback($courseName,$author)
            {
                echo '<p>Khoa hoc lap trinh ' . $courseName 
                    . ' tai ' . $author . ' </p>';
            }
            function new_action_hook($courseName = 'Wordpress',$author = "ZendVN")
            {
                do_action('new_action_hook',$courseName,$author);
            }
            Mở tập tin /wp-content/themes/twentyten/footer.php thêm vào 1 trong 2 dòng sau:
                <?php the_new_action(); ?>
                <?php do_action('new_action_hook','ZF 2x','ZendVN'); ?>
    Create Class for Action
Hook Filter
    Add_filter - basic
        Filter là một hàm được viết bằng PHP trong Plugin
        Gắn Filter vào hệ thống WP thông qua hàm có sẳn add_filter() 
        Filter được viết ra để thực hiện lọc dữ liệu input và output trong hệ thống WP
        Xác định vị trí (Hook) để gắn Filter đã viết của chúng ta 
        Để gắn một Filter vào một vị trí (hook) nào đó chúng ta sẽ sử dụng hàm: 
            add_filter( $tag, $function, $priority, $accepted_args );
        Tham số:
            $tag -  Là tên của một 'filter hook'  của WP
            $function - Tên Filter mà bạn viết để tương tác vào hệ thống
            $priority – Độ ưu tiên của Filter
            $accepted_args - Số lượng các tham số sẽ được truyền vào hàm của bạn.
        support.php -> showFunc() In ra các hàm nằm trong 1 Hook nào đó 
    Add_filter-the_title
    Add_filter-the_content
        Tra cứu Filter Hook
            http://codex.wordpress.org/Plugin_API/Filter_Reference
        support.php -> showFunc() Để xem trong 1 trang có bao nhiêu Hook được chạy, và trong những hook đó có những hàm nào 
            đang tương tác đến hook
            ZendvnMpSupport::showFunc();            ->  Check tất cả các hook và các hàm đang được thực thi
            ZendvnMpSupport::showFunc('wp_footer'); ->  Check tất cả các hàm đang được thực thi trong wp_footer
        global $post; Là 1 biến toàn cục rất quan trọng dùng để xử lý các phần liên quan đến bài viết 
    Remove, remove_all
        Remove
            Để loại bỏ một Filter ra khỏi một vị trí (hook) nào đó chúng ta sẽ sử dụng hàm: 
                remove_filter( $tag, $function, $priority)
            Tham số:
                $tag -  Là tên của một 'filter hook'  của WP
                $function - Tên Filter mà bạn muốn loại bỏ khỏi hệ thống
                $priority – Độ ưu tiên của Filter
            Admin Page -> Page -> Edit Sample Page
                Thêm vào ký tự :) vào Sample Page ở 2 vị trí bất kỳ 
                :) được chuyển đổi sang 🙂 bởi hàm convert_smilies
            ZendvnMpSupport::showFunc('the_content');
                Hook Name: the_content
                8: 000000004a01c1bc0000000021be8e1brun_shortcode, 000000004a01c1bc0000000021be8e1bautoembed
                9: do_blocks
                10: wptexturize, shortcode_unautop, prepend_attachment, wp_filter_content_tags, wpautop
                11: capital_P_dangit, do_shortcode
                20: convert_smilies
            Do đó nếu mà ta Remove đi hàm convert_smilies này thì nội dung page sẽ ko còn hiển thị ký tự cảm xúc :)
                bằng hình ảnh 🙂 nữa 
            remove_filter('the_content', 'convert_smilies', 20);
        remove_all
            Để loại bỏ tất cả Filter ra khỏi một vị trí (hook) nào đó chúng ta sẽ sử dụng hàm: 
                remove_all_filters($tag, $priority)
            Tham số:
                $tag -  Là tên của một 'filter hook'  của WP
                $priority – Độ ưu tiên của Filter
            Có thể loại bỏ theo độ ưu tiên bằng cách truyền thêm tham số $priority, hoặc loại bỏ tất cả các hàm bằng 
                trong hook đó bằng cách chỉ truyền $tag
    Has_filter & current_filter
        Has_filter
            Kiểm tra sự tồn tại của Filter trong một Hook nào đó: 
                has_filter($tag, $function_to_check)
            Tham số:
                $tag -  Là tên của một 'filter hook'  của WP
                $function_to_check - Tên Filter mà bạn muốn kiểm tra
            Kết quả trả về độ ưu tiên của hàm đã gắn vào trong filter hook($tag), nếu giá trị null có nghĩa là hàm đó chưa tồn tại 
        current_filter
            Lấy tên của một Filter tại một thời điểm nào đó : 
                current_filter()
            Giúp lấy được tên của Hook trong quá trình xử lý của WordPress
Admin Menu
    Add_dashboard_page
        Thêm vào những nhóm Menu đã có sẵn: Thêm vào hệ thống menu có sẵn của WordPress 
            add_dashboard_page(…)
            add_media_page (…)
            add_pages_page (…)
            add_comments_page (…)
            add_theme_page (…)
            add_plugins_page (…)
            add_users_page (…)
            add_management_page (…)
            add_options_page (…)
            add_posts_page(…)
        Cú pháp
            add_posts_page( $page_title, $menu_title, $capability, 
                        $menu_slug, $function);
                page_title: Tiêu đề của trang, cái mà sẽ  hiển thị trong thẻ <title> 
                menu_title: Tên của menu hiển thị trên bảng điều khiển 
                capability: khả năng tối thiểu cần thiết để xem menu, người nào có quyền truy cập vào Menu đó 
                        (https://wordpress.org/support/article/roles-and-capabilities/)
                menu_slug: tên Slug để tham khảo đến menu; phải là một tên duy nhất 
                function: Chức năng  được gọi  để hiển thị nội dung trang cho các mục, hàm này sẽ được gọi khi nhấn vào Menu mới
                    được tạo
        manage_options: capability này chỉ có nhóm người dùng có roles là Super Admin và Administrator có quyền truy cập
        is_admin() Kiểm tra vùng đang truy cập là Admin hay Public 
    Add_menu_page & add_submenu_page
        Add_menu_page
            Add 1 nhóm Menu vào 1 vị trí bất kỳ trong hệ thống Menu của WordPress, Add_menu_page sẽ add vào nhóm Menu cùng cấp với các 
                Menu có trong hệ thống WordPress chứ không phải là thực hiện Add vào Menu con
            add_menu_page( page_title, menu_title, capability,
                        menu_slug, function,icon_url, position );
                page_title: Tiêu đề của trang, cái mà sẽ  hiển thị trong thẻ <title> 
                menu_title: Tên của menu hiển thị trên bảng điều khiển 
                capability: khả năng tối thiểu cần thiết để xem menu 
                menu_slug: tên Slug để tham khảo đến menu; phải là một tên duy nhất 
                function: Chức năng  được gọi  để hiển thị nội dung trang cho 
                            các mục 
                icon_url: URL đến một hình ảnh tùy chỉnh để sử dụng như là 
                            biểu tượng Menu 
                Position: Vị trí trong thứ tự menu, nơi nó sẽ xuất hiện
        add_submenu_page
            Thêm submenu vào Menu mới mà mình đã tạo ra
            add_submenu_page( parent_slug, page_title, menu_title,
                                capability,menu_slug, function );
            parent_slug: slug của Menu parent
            page_title: Tiêu đề của trang, cái mà sẽ  hiển thị trong thẻ <title> 
            menu_title: Tên của menu hiển thị trên bảng điều khiển 
            capability: khả năng tối thiểu cần thiết để xem menu 
            menu_slug: tên Slug để tham khảo đến menu; phải là một tên duy nhất 
            function: Chức năng  được gọi  để hiển thị nội dung trang cho 
                        các mục
            Position: Vị trí trong thứ tự menu, nơi nó sẽ xuất hiện
    Remove_menu - remove_submenu
        Để thêm nhóm Menu vào vị trí bất kỳ trong hệ thống menu của WP. Chúng ta sử dụng tham số position  trong phương 
            thức add_menu_page()
            Khi điền vào giá trị position là số nguyên thì nó sẽ nhóm Menu đến vị trí mình muốn. trong trường hợp điền trùng 
                với position đã có sẵn trong hệ thống thì nó tự động sẽ điền lên Menu đã có sẵn đó
            2 Dashboard
            4 Separator
            5 Posts
            10 Media
            15 Links
            20 Pages
            25 Comments	
            59 Separator
            60 Appearance
            65 Plugins
            70 Users
            75 Tools
            80 Settings
            99 Separator
        Remove_menu - remove_submenu
            Để xóa một menu đã tồn tại trong hệ thống chúng ta dùng phương thức sau
                remove_menu_page( $menu_slug )
                    menu_slug: tên Slug của các menu; phải là một tên duy nhất 
                remove_submenu_page( $menu_slug, $submenu_slug );
                    menu_slug: tên Slug của menu cha; phải là một tên duy nhất 
                    submenu_slug: tên Slug của menu muốn xóa; phải là một tên duy nhất 
            Có thể remove đi cả các Menu mở rộng được tạo thêm và các Menu đã có sẵn trong hệ thống
                remove_submenu_page( 'edit.php', 'post-new.php');
                remove_menu_page( 'edit.php' );
Option API
    Add_option
        Option API là tập hợp một số hàm của WP.
        Option API cung cấp cho chúng ta các phương thức để thao tác với dữ liệu trong bảng wp_options và trong trường hợp multisite
        Các phương thức trong Option API
        Add/Delete Option
            add_option()
            delete_option()
            add_site_option()
            delete_site_option()
            Get/Update Option
            get_option()
            update_option()
            get_site_option()
            update_site_option()
        Phương thức add_option()
            Phương thức này giúp chúng ta thêm một dòng vào trong bảng wp_options 
                add_option( $option, $value, $deprecated, $autoload );
            Tham số:
                $option - Tên của tùy chọn muốn thêm vào trong bảng wp_options(Giá trị nằm trong cột option_name). 
                $value - Giá trị của tùy chọn(Giá trị nằm trong cột option_value). 
                $deprecated – Giá trị này đã bị loại bỏ và không còn sử dụng từ phiên bản 2.3
                $autoload - Nếu giá trị ở đây là YES nó sẽ được tự động load bởi phương thức wp_load_alloptions().
            admin_init; Hook này được khởi tạo rất sớm khi truy cập vào Admin, nên thường dùng hook này để thêm giá trị
                vào bảng option
            $value có thể là 1 mảng hoặc 1 giá trị 
                Mảng được lưu vào Database ở dạng chuỗi, muốn đưa nó về mảng ban đầu thì dùng hàm unserialize()
    Get_option
        Phương thức get_option()
            Phương thức này giúp chúng ta lấy ra giá trị nằm trong bảng wp_options 
                get_option( $option, $default );
            Tham số:
                $option - Tên của tùy chọn trong database(giá trị của trường 'option_name'). 
                $value - giá trị mặc định nếu giá trị của trường 'option_name' không tồn tại. 
            Trong trường hợp giá trị được lưu trong Database là 1 mảng được lưu dưới dạng chuỗi thì hàm get_option() sẽ tự động 
                biến đổi chuỗi đó thành mảng(trong get_option() nó cũng sử dụng đến hàm unserialize()) 
    Update & delete_option
        Phương thức update_option()
            Phương thức này giúp chúng ta cập nhật giá trị trong bảng wp_options 
                update_option( $option, $new_value );
            Tham số:
                $option - Tên của tùy chọn trong database(giá trị của trường 'option_name'). 
                $new_value - Giá trị mới của tùy chọn. 
            Phương thức update_option() có 1 hạn chế đó là nó không cập nhật lại giá trị của autoload(no/yes)
            Trong trường hợp giá trị của $option đã tồn tại trong bảng wp_options thì nó sẽ thực hiên cập nhật lại giá trị của 
                option_value, trong trường hợp giá trị option_name chưa tồn tại thì nó sẽ thêm record mới vào
        Phương thức delete_option()
            Phương thức này giúp chúng ta xóa 1 dòng nào đó trong bảng wp_options khi biết được giá trị của option_name
                delete_option($option);
            Tham số:
                $option -  Tên của tùy chọn trong database(giá trị của trường 'option_name'). 
    Other option
        Để kiểm tra giá trị option_name thì có thể xem trong bảng wp_options hoặc cũng có thể xem ở trang
            http://wordpress.xyz/wp-admin/options.php
        Các giá trị Option cần quan tâm
            admin_email
            blogname
            blogdescription
            blog_charset
            date_format
            default_category
            home
            siteurl
            template
            start_of_week
            upload_path
            posts_per_page
            posts_per_rss
Setting API
    About Setting API
        Setting API là tập hợp một số hàm của WP.
        Cung cấp các phương thức để chúng ta có thể tạo ra các phần tử trong Form
        Cung cấp các phương thức để chúng ta xử lý dữ liệu trước khi đưa vào bảng wp_option
        Cung cấp các phương thức hiển thị các thông báo khi xử lý dữ liệu (error & update) 
    Các phương thức trong Setting API
        Setting Register/Unregister
            register_setting()
            unregister_setting()
        Add Field/Section
            add_settings_field()
            add_settings_section()
        Options Form Rendering
            settings_fields()
            do_settings_sections()
            do_settings_fields()
        Errors
            add_settings_error()
            get_settings_errors()
            settings_errors()
    Register & setting_fields
        Phương thức register_setting()
            Phương thức này cũng giúp bạn tạo ra thêm các phần setting trong phần Setting Admin 
                register_setting($option_group,$option_name,$sanitize_callback);
            Tham số:
                $option_group - Tên của nhóm setting
                $option_name - Giá trị này sẽ được đưa vào cột option_name trong bảng wp_options. 
                $sanitize_callback – Hàm dùng để xử lý dữ liệu trước khi lưu vào database(lưu vào trường option_value)
        Phương thức settings_fields()
            Để tạo ra một số phần tử ẩn hỗ trợ cho Form 
                settings_fields( $option_group);
            Tham số:
                $option_group – Tên của tùy chọn
            Khi chạy phương thức này sẽ tạo ra một số phần HTML:
                <input type="hidden" name="option_page" value="zendvn_mp_options">       -> Chứa giá trị của option_group
                <input type="hidden" name="action" value="update">                       -> Thực hiện hành động update
                <input type="hidden" id="_wpnonce" name="_wpnonce" value="f3d9326d3f">   -> Được tạo bởi hàm wp_nonce_field() từ giá trị trên thanh địa chỉ URL
                <input type="hidden" name="_wp_http_referer"                             -> Giá trị này giúp sau khi lưu giữ liệu xong thì quay về trang hiện tại
                    value="/wp-admin/admin.php?page=zendvn-mp-my-setting">	
    Add section & add field
        Phương thức add_settings_section()
            Tạo các phân đoạn cho các vùng nhập liệu của Form
                add_settings_section( $id, $title, $callback, $page );
            Tham số:
                $id - id của section. 
                $title - tên của section. 
                $callback –  hàm xử lý cho phần section khi cần thiết
                $page –  Trang hoặc menu_slug mà chúng ta muốn section hiển thị
        Phương thức do_settings_sections()
            Để tạo ra một số phần tử ẩn hỗ trợ cho Form
                do_settings_sections($page);
            Tham số:
                $page – Tên page hoặc menu slug
            Khi chạy phương thức này sẽ tạo ra các phân đoạn (section), được đăng ký trong Form
            Ở mỗi phân đoạn này sẽ có phần tử form
        Phương thức add_settings_field()
            Để tạo ra các phần tử trong Form
                add_settings_field($id, $title, $callback, $page, $section, $args);
            Tham số:
                $id - Giá trị của thuộc tính id trong phần tử HTML. 
                $title - Tiêu đề của phần tử. 
                $callback – Hàm callback sử dụng tạo ra phần tử HTML theo ý muốn
                $page – menu page hoặc menu slug của trang
                $args - Có thể truyền hoặc không, mảng tham số được dùng khi tạo phần tử Form 
    Save & show setting 1
    Do_setting_field
        Phương thức do_setting_field()
            Dùng để đưa 1 phần tử input nào đó vào trong Form ở 1 vị trí bất kỳ mà ko theo định dạng chuẩn của WordPress 
                là đưa vào trong 1 bảng 
    Save & show setting 2
        Ở Save & show setting 1 thì mình đã lưu vào Database bảng wp_option ở dạng dữ liệu mảng -> chỉ lưu 1 dòng duy nhất 
            -> Giải quyết vấn đề lưu được nhiều dòng vào trong Database 
        Các giá trị trong Form được post được lưu trong $_POST
        Sử dụng các phương thức trong nhóm option api để lưu các giá trị vào bảng wp_option thành các dòng khác nhau 
    Upload file 1
        add_options_page(): Add submenu page to the Settings main menu.
            Khi đó khi submit form để lưu dữ liệu vào trong hệ thống thành công thì sẽ có thông báo hiển lên là lưu thành công 
        Lấy thông tin file đã upload dựa vào biến $_FILES
        wp_handle_upload() Sẽ thực hiện upload file 
        Hình ảnh Upload được lưu ở  wp-content\uploads
    Upload file 2
        Hiển thị hình đã Upload vào Form
        Khi Upload 1 hình mới lên thì thực hiện xóa đi hình cũ 
    Validate & Message 1
        Phương thức add_settings_error()
            Thêm thông báo error cho Setting page
                add_settings_error($setting, $code, $message, $type);
            Tham số:
                $setting – menu slug của trang. 
                $code – giá trị này sẽ kết hợp với chuỗi 'setting-error-' để tạo ra thuộc tính id trong mã HTML. 
                $message – Chuỗi thông báo lỗi
                $type – kiểu thông báo, Possible values include 'error', 'success', 'warning', 'info'.
        -> Sau khi add_settings_error() thì có thể hiển thị error cho trường hợp Add submenu page to the Settings 
            main menu by add_options_page().
    Validate & Message 2
        Phương thức get_settings_errors()
            Lấy ta các thông báo lỗi đã đưa vào bằng phương thức add_settings_error()
                get_settings_errors( $setting, $sanitize );
            Tham số:
                $setting – menu slug của trang. 
                $sanitize – chỉ có 2 giá trị true/false. Dùng để lọc sạch dữ liệu trước khi hiển thị thông báo
        Phương thức settings_errors()
            Hiển thị thông báo trên trang
                settings_errors( $setting, $sanitize, $hide_on_update );
            Tham số:
                $setting – menu slug của trang. 
                $sanitize – chỉ có 2 giá trị true/false. Dùng để lọc sạch dữ liệu trước khi hiển thị thông báo
                $hide_on_update – chỉ có 2 giá trị true/false. Nếu là true nó sẽ không hiển thị thông báo error
        -> settings_errors() Dùng cho trường hợp thị error cho trường hợp Add a top-level menu page by add_menu_page()
            sau khi đã add_settings_error()
Widgets
    About Widgets
        Widgets API là tập hợp 1 số hàm của WP
        Cung cấp các phương thức có thể tạo ra cá khối hiển thị thông tin ở Frontend và Backend
        Widgets hiển thị ở các phần: Ngoài Frontend, phần quản lý Widgets của Admin, Phần Dashboard của Admin
    Các phương thức trong Widgets API
        Widget Functions:
            is_active_widget();
            the_widget();
            register_widget();
            unregister_widget();
        Internal Functions:
            wp_register_widget_control();
            wp_unregister_sidebar_widget();
            wp_convert_widget_settings();
            wp_get_widget_defaults();
            wp_widget_description()
    ZendvnHtml 1
        Tạo ra các phần tử trong Form bằng 1 Class -> Giảm thiểu quá trình viết mã và hạn chế sai sót
    ZendvnHtml 2
    Func __contruct
        Để tạo ra 1 Wid thì cần tạo ra 1 class kế thừa từ class WP_Widget với cấu trúc:
            class Zendvn_Mp_Widget_Simple extends WP_Widget {
                public function __construct() {}	
                public function widget( $args, $instance ) {}
                public function update( $new_instance, $old_instance ) {}
                public function form( $instance ) {}
            }
            __construct(): Giúp thiết lập các giá trị cho Widget
            widget(): Giúp hiển thị thông tin ở phía ngoài Frontend
            form(): Giúp tạo ra Form để nhập thông tin ở phía Admin
            update(): Giúp đưa dữ liệu vào trong Database
        Giúp khởi tạo các giá trị cần thiết cho Widget
            __construct($id_base, $name, $widget_options, $control_options)
        Tham số:
            $id_base: ID của Widget
            $name: Tên của Widget
            $widget_options: Mảng này có 2 phần tử classname và description
                classname: Giúp đưa css hoặc javascript vào Widget
                description: Mô tả của Widget
            $control_options: Thiết lập chiều rộng cho Widget
    func form 
        get_field_id(): WordPress sẽ tạo ra id cho Widget
        get_field_name(): Tạo ra name cho ô input
    Func update & widget
        strip_tags() — 文字列から HTML および PHP タグを取り除く
            Loại bỏ đi những giá trị html ko cần thiết nếu mình nhập vào 
        extract() extract các phần tử của 1 mảng thành các phần tử nằm trên mảng
        $before_widget và $after_widget sẽ sinh ra thẻ đóng và thẻ mở <li>
            $before_widget: <li id="zendvn-mp-widget-simple-2" class="widget-container zendvn-mp-wg-css-simple">
            $after_widget: </li>
        $before_title và $after_title sinh ra thẻ bao ngoài của Widget Title
            $before_title: <h3 class="widget-title">
            $after_title: </h3>
        apply_filters(): Giúp lọc đi các giá trị không cần thiết ở Title đó
            $title = apply_filters('widget_title', $instance['title']);
            Trong hook 'widget_title' này có các hàm giúp lọc đi các giá trị không cần thiết:
                wptexturize, convert_chars, esc_html
    Add CSS 1
        Đưa 1 tập tin Css vào trong WordPress nói chung và trong Widget nói riêng
        Dùng phương thức add_action() để đưa phương thức 'add_css' vào trong hook 'wp_head'
            add_action('wp_head',array($this,'add_css'));
    Add CSS 2
        Phương thức wp_register_style()
            Đăng ký tập tin css vào hệ thống WP(không hiển thị trong tập tin html)
                wp_register_style($handle, $src = '', $deps = array(), $ver = false, $media = 'all')
            Tham số:
                $handle: id của phần tử <link> trong mã HTML
                $src: Đường dẫn đến tập tin CSS
                $deps: Tập tin CSS gọi vào phụ thuộc vào tập tin CSS khác?, các tập tin trong mảng $deps sẽ được load vào trước 
                $ver: Phiên bản của tập tin CSS
                $media: CSS này hiển thị trên các thiết bị nào
            Muốn đưa tập tin css này vào hệ thống WP thì dùng wp_enqueue_style($handle);
        Phương thức wp_enqueue_style()
            Đưa tập tin css vào hệ thống WP(không hiển thị trong tập tin html)
                wp_enqueue_style($handle, $src = '', $deps = array(), $ver = false, $media = 'all')
            Tham số:
                $handle: id của phần tử <link> trong mã HTML
                $src: Đường dẫn đến tập tin CSS
                $deps: Tập tin CSS gọi vào phụ thuộc vào tập tin CSS khác?, các tập tin trong mảng $deps sẽ được load vào trước 
                $ver: Phiên bản của tập tin CSS
                $media: CSS này hiển thị trên các thiết bị nào
        Dùng phương thức wp_register_style() và wp_enqueue_style() trực tiếp trong __construct() thì các tập tin css
            được thêm vào sẽ được nằm ở phía trên các thẻ link của các tập tin css có sẵn trong hệ thống WordPress
        Dùng phương thức wp_register_style() và wp_enqueue_style() trong 1 phương thức khác rồi sau đó add vào wp_enqueue_scripts hook
            thì các tập tin css được thêm vào sẽ được nằm ở phía dưới các thẻ link của các tập tin css có sẵn trong hệ thống WordPress
    Add CSS 3
        global $wp_styles: Biến toàn cục này giúp mình thấy được các tập tin css đã có sẵn trong hệ thống của WordPress có bao gồm cả
            các tập tin mà mình đăng ký thêm vào 
        is_front_page(): Trang chủ
            http://wordpress.xyz/
        is_page(): Trang page 
            http://wordpress.xyz/?page_id=2
        Thay đổi được giao diện của Widget theo ý thích 
    Add JS 1
        Đưa tập tin javascript vào trong WordPress nói chung và Widget nói riêng. Cách làm cũng khá giống như đưa css
        Nhúng trực tiếp file JavaScript vào
            wp_enqueue_script($handle, $src, $deps, $ver, $in_footer)
        Tham số:
            $handle: Tên or id của tập tin javascript
            $src: Đường dẫn đến tập tin JavaScript
            $deps: Mảng chứa các tập tin javascript liên quan
            $ver: Phiên bản của tập tin javascript
            $in_footer: Tập tin javascript này được add vào phía đầu hay phía cuối của trang 
        global $wp_scripts Biến toàn cục này giúp có thể xem được nhiều thông tin hơn ở trong Widget
        wp_enqueue_script('abc',ZENDVN_MP_JS_URL . '/abc.js',array('jquery'),'1.0',true);
            WordPress đã chuẩn bị sãn cho mình tập tin jquery nên khi viết mã javascript bằng các cú pháp của jquery thì
                chỉ cần truyền thêm tham số array('jquery') trong cú pháp của wp_enqueue_script()
    Check CSS - JS
        Kiểm tra sự tồn tại của 1 tập tin css hay js trong hệ thống website của mình
        Khi đưa những tập tin css hoặc js vào hệ thống WordPress thì cần phải kiểm tra sự tồn tại để tránh va chạm
            wp_style_is($handle, $list = 'enqueued');
            wp_script_is($handle, $list = 'enqueued')
        Tham số:
            $handle: Tên hay id của tập tin js
            $list: Tên của nhóm thuộc tính nằm trong wp_style và wp_script
                Optional. Status of the stylesheet to check. Default 'enqueued'. Accepts 'enqueued', 'registered', 
                    'queue', 'to_do', and 'done'.
        Có thê gọi ở bất kỳ chỗ nào mà mình muốn: Có thể trong widget, plugin, setting page 
    Check active - unregister
        active
            Kiểm tra xem Widget đã được sử dụng hay chưa
                is_active_widget($callback = false, $widget_id = false, $id_base = false, $skip_inactive = true);
            Tham số:
                $callback: Hàm dùng để xử lý thêm các chức năng trong quá trình kiểm tra
                $widget_id: ID của Widget, ít được xử dụng bởi vì Id của Widget được tự động sinh ra bởi hệ thống
                $id_base: ID mà mình đặt cho WG, là tham số chính được sử dụng
                $skip_inactive: Nên để giá trị mặc định là true
            Giá trị trả về là id của vùng chứa Widget của mình -> Widget đang được sử dụng. Vậy trong trường hợp đang 
                được sử dụng thì có thể tiến hành add các tập tin css và js vào tại thời điểm mà mình muốn giúp tối ưu
                hệ thống vì các tập tin js hay css đưa vào với mục đích dùng cho Widget nên chỉ thêm các tập tin đó vào 
                khi Widget hiển thị mà thôi
        unregister
            Tạm thời tắt(loại bỏ) 1 Widget nào đó trong hệ thống của Widget. Widget này có thể là Widget đã được tích hợp sẵn hoặc là 
                các Widget mở rộng 
                unregister_widget($widget)
            Tham số:
                $widget: Tên class cửa Widget -> tên class chứa Widget(Zendvn_Mp_Widget_Simple)
            Cách sử dụng là đưa vào trong hàm rồi đưa hàm đó 1 hook tương ứng
        Danh sách các Widget nằm trong hệ thống cửa Widget
            WP_Widget_Pages — Pages Widget
            WP_Widget_Calendar — Calendar Widget
            WP_Widget_Archives — Archives Widget
            WP_Widget_Links — Links Widget
            WP_Widget_Meta — Meta Widget
            WP_Widget_Search — Search Widget
            WP_Widget_Text — Text Widget
            WP_Widget_Categories — Categories Widget
            WP_Widget_Recent_Posts — Recent Posts Widget
            WP_Widget_Recent_Comments — Recent Comments Widget
            WP_Widget_RSS — RSS Widget
            WP_Widget_Tag_Cloud — Tag Cloud Widget
            WP_Nav_Menu_Widget - Navigation Menu Widget
    Dashboar widget
        Hiển thị widget trong Dashboar của Admin
        Mục đích của Dashboar widget là để tóm tắt các chức năng hoặc bài viết, những cái mới nhất, quan trọng nhất
            mà mình muốn thông báo cho Admin để Admin có thể xử lý trong hệ thống        
	    zendvn_mp_widget_db($widget_id, $widget_name, $callback, $control_callback = null, $callback_args = null)
        Tham số:
            $widget_id: id của Widget
            $widget_name: Tiêu đè của Widget
            $callback: Hàm sẽ hiển thị nội dung của Widget đó
            $control_callback: Hàm xử lý Widget khi muốn lưu dữ liệu vào trong Database
            $callback_args: Mảng chứa tham số truyền vào trong biến post
Tương tác với database
    Khởi tạo đối tượng wpdb
        global $wpdb;
    get_row
        Phương thức get_row() này giúp chúng ta lấy ra một dòng dữ liệu trong một bảng nào đó của database WP.
            $wpdb->get_row($query,$output,$y)
        Tham số:
            $query: câu truy vấn SQL
            $output : Kiểu hiển thị dữ liệu sau khi lấy dữ liệu từ table ra  
                            ARRAY_A | ARRAY_N | OBJECT
                ARRAY_A: Các khóa của mảng ở dạng chuỗi
                ARRAY_N: Các khóa của mảng ở dạng số
            $y : Thứ tự record
    Get_col - insert - replace - update
        Phương thức get_col()
            Phương thức này giúp chúng ta lấy ra một tập hợp các dòng dữ liệu trong một bảng nào đó của database WP. 
            Nhưng nó chỉ lấy ra 1 cột duy nhất
                $wpdb->get_col( $query, $x )
            Tham số
                $query: câu truy vấn đến bảng trong database
                $x: Vị trí cột chúng ta muốn lấy dữ liệu ra 
        Phương thức get_results() 
            Phương thức này giúp chúng ta lấy ra một tập hợp các dòng dữ liệu trong một bảng nào đó của database WP. 
                $wpdb->get_results( $query = null, $output = OBJECT )
            Tham số:
                $query: câu truy vấn SQL
                $output : Kiểu hiển thị dữ liệu sau khi lấy dữ liệu từ table ra  
                            ARRAY_A | ARRAY_N | OBJECT
        Phương thức insert() 
            Phương thức này giúp chúng ta một dòng dữ liệu trong một bảng nào đó của database WP. 
            Nếu đưa vào thành công thì phương thức sẽ trả về giá trị 1. 
                $wpdb->insert( $table, $data, $format );
            Tham số:
                $table: Tên của bảng chúng ta
                $data: Mảng chứa dữ liệu của dòng mới
                $format: Định dạng dữ liệu trước khi thêm vào bảng
        Phương thức replace () 
            Phương thức này giúp chúng ta thay đổi thông tin của một dòng trong table nếu nó tồn tại và thêm mới nếu nó chưa tồn tại. 
                $wpdb->replace( $table, $data, $format );
            Tham số:
                $table: Tên của bảng chúng ta
                $data: Mảng chứa dữ liệu của dòng mới
                $format: Định dạng dữ liệu trước khi thêm vào bảng
        Phương thức update() 
            Phương thức này giúp chúng ta thay đổi thông tin của một dòng trong table. 
                $wpdb->update( $table,$data,$where,$format,$where_format);
            Tham số:
                $table: Tên bảng chứa dữ liệu
                $data: Mảng dữ liệu sẽ cập nhật
                $where: Điều kiện cập nhật
                $format: Định dạng cho dữ liệu trong mảng $data
                $where_format: Định dạng cho điều kiện $where
            Phương thức này có 1 hạn chế đó là $where không thể truyền nhiều điều kiện vào mà nó thường chứa giá trị của khóa chính trong
                bảng                
    Delete - prepare - query
        Phương thức delete() 
            Phương thức này giúp chúng ta xóa dữ liệu trong table. 
                $wpdb->delete( $table, $where, $where_format);
            Tham số:
                $table: Tên bảng chứa dữ liệu
                $where: Điều kiện để xóa
                $where_format: Định dạng cho điều kiện $where
        Phương thức prepare()  
            Phương thức này giúp chúng ta tạo ra một câu truy vấn an toàn để bảo mật website tránh được các lỗi SQL injection 
                $wpdb->prepare( $query, $args )
            Tham số:
                $query: Câu truy vấn SQL
                $args: Các tham số truyền vào câu truy vấn
            Chỉ thực hiện lọc dữ liệu truyền vào để tạo ra 1 câu truy vấn an toàn. Để thực thi câu lệnh thì cần dùng phương thức query()
        Phương thức query()  
            Các phương thức chúng ta đã học ở phía trên trong core của WP không thể nào đáp ứng được mọi trường hợp trong quá trình truy vấn vào database vì vậy chúng ta sẽ thường xuyên phải viết các câu SQL theo cách thông thường và sau đó thực hiện với phương thức $wpdb->query() 
                $wpdb->query( $query )
            Tham số:
                $query: Câu truy vấn SQL được xây dựng từ phương thức prepare()
        $wpdb->table_name
            Truy cập vào các bảng trong WP để lấy tên bảng
            $posts	 	= wp_posts
            $postmeta		 = wp_postmeta
            $comments	 = wp_comments
            $commentmeta	= wp_commentmeta
            $terms		= wp_terms
            $term_taxonomy	= wp_term_taxonomy 
            $term_relationships	= wp_term_relationships
            $users		= wp_users
            $usermeta		= wp_usermeta
            $links		= wp_links
            $options		= wp_options
WP_Query
    https://developer.wordpress.org/reference/classes/wp_query/
    WP_Query 1
        Đối tượng WP_Query giúp ta truy cập vào tất cả các bảng mặc định của hệ thống WordPress
        Create new user
            editor      editor@gmail.com
            contributor contributor@gmail.com
            author      author@gmail.com
        Setting -> Reading -> Blog pages show at most -> Setting cho giá trị posts_per_page
        get_the_ID() lấy id của bài viết
        get_the_title() lấy tiêu đề bài viết
    WP_Query 2
        query
        query_vars
        Kết quả của câu truy vấn 
    WP_Query 3: Properties
        queried_object
        get_queried_object() có 2 trường hợp
            - Câu query chỉ hiển thị được 1 bài viết thì nó sẽ lấy ra thông tin của bài viết đó 
            - Trong trường hợp câu query hiển thị được nhiều bài viết thì nó sẽ lấy ra 1 đối tượng là 
                thông tin đầy đủ với giá trị id tương ứng truyền vào
            If queried object is not set, then the queried object will be set from the category, tag, taxonomy, 
                posts page, single post, page, or author query variable. After it is set up, it will be returned.
        queried_object_id
        get_queried_object_id()
            If the request is a category, author, permalink or post / page, holds the corresponding ID
            Nếu kết quả câu truy vấn hiển thị được nhiều bài viết thì giá trị trả về sẽ là id ccuar user 
            Nếu giá kết quả câu query chỉ hiển thị được 1 bài viết thì giá trị trả về sẽ là id của bài viết
        posts
        post_count: The number of posts being displayed.
            Hệ thống sẽ hiển thị 5 bài viết trên 1 trang 
        found_posts: The total number of posts found matching the current query parameters
            Tổng số bài viết của 1 người nào đó 
        max_num_pages: Số trang hiển thị bài viết của 1 người nào đó 
        current_post
            (available during The Loop) Index of the post currently being displayed.
            Trả về chỉ số mảng của phần tử trong mảng $posts
        post
            (available during The Loop) The post currently being displayed.
        is_admin: Vùng đang truy cập là vùng Admin
        is_page
    WP_Query 4: Methods 
        init(): Initiates object properties and sets default values.
            Khởi tạo lại đối tượng bằng cách thiết lập các giá trị null zero vào trong các thuộc tính của đối tượng đó 
        parse_query($query = ''): Parse a query string and set query type booleans.
            Truyền vào 1 chuỗi truy vấn hoặc 1 mảng truy vấn sau đó phương thức này sẽ phân tích chuỗi or mảng truyền vào
                đưa các giá trị trong chuỗi or mảng truyền vào đó đến các thuộc tính có sẵn của đối tượng WP_Query(Nó sẽ
                xóa đi toàn bộ giá trị đã truyền trước đó sau đó thiết lập lại giá trị mới)
            Xử dụng kèm với phương thức get_posts()↓
        get_posts(): Retrieves an array of posts based on query variables.
        get($query_var, $default = ''):  Retrieve query variable
            Phương thức này lấy ra các giá trị nằm ở trong phần tử query_vars của WP_Query
        set($query_var, $value): Set query variable.
            Phương thức này đưa các giá trị vào nằm ở trong phần tử query_vars của WP_Query
            Xử dụng kèm với phương thức get_posts()
        next_post(): Set up the next post and iterate current post index.
            Phương thức này sẽ gắn bài viết hiện thời bằng bài viết kế tiếp
        the_post(): Thiết lập giá trị global cho $post
        have_posts(): Determines whether there are more posts available in the loop.
        rewind_posts(): Rewind the posts and reset post index.
        query(): Sets up the WordPress query by parsing query string.
            Là sự kết hợp của 2 phương thức đó là parse_query() và get_posts()
    Author
        Author Parameters
        Show posts associated with certain author.
        Các tham số liên quan đến author khi truyền vào WP_Query()
            author (int) – use author id.
            author_name (string) – use ‘user_nicename‘ – NOT name.
            author__in (array) – use author id
            author__not_in (array) – use author id
        wp_users:wp_usermeta -> 1:n 
        wp_users:wp_posts -> 1:n 
    Category
        Sử dụng các giá trị của category để hiển thị ra các bài viết
        Show posts associated with certain categories.
        Bảng để chứa các Category và Tag: wp_terms
        wp_terms:wp_term_taxonomy -> 1:n
        wp_term_taxonomy:wp_term_taxonomy -> 1:n
        Các tham số liên quan đến category
            cat (int) – use category id.
                Display posts that have one category (and any children of that category), using category id
                -> Lấy luôn các bài viết nằm ở trong danh mục con
            category_name (string) – use category slug.
                Display posts that have this category (and any children of that category), using category slug
                -> Lấy luôn các bài viết nằm ở trong danh mục con
            category__and (array) – use category id.
                Display posts that are in multiple categories. 
            category__in (array) – use category id.
                Display posts that have this category (not children of that category), using category id
                -> Không lấy các bài viết nằm trong danh mục con của nó
            category__not_in (array) – use category id.
        post=49 -> thêm category và tag 
    Tag
        Tag Parameters
        Sử dụng các gia trị của tag để liệt kê ra các bài viết
        Show posts associated with certain tags.
        Các tham số liên quan đến tag
            tag (string) – use tag slug.
            tag_id (int) – use tag id.
            tag__and (array) – use tag ids.
            tag__in (array) – use tag ids.
            tag__not_in (array) – use tag ids.
            tag_slug__and (array) – use tag slugs.
            tag_slug__in (array) – use tag slugs.
        Khi có 1 tag thì cần kiểm tra xem nó có bao nhiêu từ, khi nó có hơn 1 từ thì không được dùng 'tag' mà 
            cần dùng đến 'tag_slug__in' hoặc 'tag_slug__and' để tìm các bài viết có tag nhiều hơn 2 từ. Hoặc 
            cũng có thể tìm theo id 
    Search - Post - Page
        Search
            Search Parameters
                Show posts based on a keyword search.
                    s (string) – Search keyword.
        Post - Page
            Post & Page Parameters 
            Display content based on post and page parameters. Remember that default post_type is only set to display posts but not pages.
            Lấy ra các bài viết bằng các thuộc tính ở trong phần bài viết
            p (int) – use post id.
            page_id (int) – use page id.
            name (string) – use post slug.
            pagename (string) – use page slug.
                Display child page using the slug of the parent and the child page, separated by a slash (e.g. ‘parent_slug/child_slug’):
            post_parent (int) – use page id to return only child pages. Set to 0 to return only top-level entries.
                Cần chỉ rõ bài viết đó thuộc kiểu nào(post hay page)
                    $wpQuery = new WP_Query(array( 'post_parent' => 2, 'post_type' => 'page' ));
                Display only top-level pages, exclude all child pages:
                    $wpQuery = new WP_Query(array( 'post_parent' => 0, 'post_type' => 'page' ));
    Password - Type
        Password
            Password Parameters
            has_password (bool) – true for posts with passwords ; false for posts without passwords ; null for all posts 
                with and without passwords 
            post_password (string) – show posts with a particular password 
        Type
            Post Type Parameters
        Status Parameters
            Chỉ sử dụng cho các bài viết(post) 
    Pagination
        Pagination Parameters
        nopaging (boolean) – show all posts or use pagination. Default value is ‘false’, use paging.
        posts_per_page (int) – number of post to show per page. Use 'posts_per_page'=>-1 to show all posts (the 'offset' 
            parameter is ignored with a -1 value). 
        offset (int) – number of post to displace or pass over.
        paged (int) – number of page. Show the posts that would normally show up just on page X.
        ignore_sticky_posts (boolean) – ignore post stickiness
            Make this post sticky
            Bài quan trọng, sẽ được hiển thị ở vị trí dễ thấy nhất để cho người truy cập vào website có thế nhìn thấy nội 
                dung của bài viết 
            false (default): move sticky posts to the start of the set. true: do not move sticky posts to the start of the set.
    Order - Orderby - Date
        Order - Orderby
            Sort retrieved posts.
                order (string | array) – Designates the ascending or descending order of the ‘orderby‘ parameter. Defaults to ‘DESC’. 
                    An array can be used for multiple order/orderby sets.
                ‘ASC‘ – ascending order from lowest to highest values (1, 2, 3; a, b, c).
                ‘DESC‘ – descending order from highest to lowest values (3, 2, 1; c, b, a).
            orderby (string | array) – Sort retrieved posts by parameter. Defaults to ‘date (post_date)’. One or more options can be passed
            Display one random post:
                $wpQuery = new WP_Query(  array (  'orderby' => 'rand', 'posts_per_page' => 1));
Transients API
    About Transients
        https://developer.wordpress.org/apis/handbook/transients/
        This page contains the technical documentation of WordPress Transients API, which offers a simple and standardized way of 
            storing cached data in the database temporarily by giving it a custom name and a timeframe after which it will expire 
            and be deleted.
        The Transients API is very similar to the Options API but with the added feature of an expiration time, which simplifies 
            the process of using the wp_options database table to temporarily store cached information.
    Transients API 1
    Transients API 2
    Transients API 3
        ignore_sticky_posts: Không có tác dụng trên trang Admin 
        wp_terms: 
            9  - post-format-aside
            10 -post-format-gallery
        wp_term_taxonomy: 
            9 - post_format
            10 - post_format
        wp_term_relationships:  
            20 - 10
            26 - 9
        Taxonomy Parameters
            tax_query (array) – use taxonomy parameters 
            relation (string) – The logical relationship between each inner taxonomy array when there is more than one. 
                Possible values are ‘AND’, ‘OR’. Do not use with a single inner taxonomy array.
            taxonomy (string) – Taxonomy.
            field (string) – Select taxonomy term by. Possible values are ‘term_id’, ‘name’, ‘slug’ or ‘term_taxonomy_id’. 
                Default value is ‘term_id’.
            terms (int/string/array) – Taxonomy term(s).
            include_children (boolean) – Whether or not to include children for hierarchical taxonomies. Defaults to true.
            operator (string) – Operator to test. Possible values are ‘IN’, ‘NOT IN’, ‘AND’, ‘EXISTS’ and ‘NOT EXISTS’. 
                Default value is ‘IN’
            $tax_query =array(
                             array(						
                                    'field' => 'slug',
                                    'terms' => 'post-format-' . $format,
                                    'taxonomy' => 'post_format',
                                    'operator' => 'IN'
                                 )
                        );
            field là field của bảng wp_terms
            taxonomy là field của bảng wp_term_taxonomy
            Rồi từ đó lấy được id của các post trong bảng wp_term_relationships
    Transients API 4
        Saving Transients
            set_transient( $transient, $value, $expiration )
        Tham số:
            $transient (string): Transient name.
                Expected to not be SQL-escaped. Must be 172 characters or fewer in length.
                Đây là tên sẽ được lưu vào cột 'option_name' của bảng 'wp_options'
            $value (array|object): Data to save, either a regular variable or an array/object.
                The API will handle serialization of complex data for you.
                Đây là giá trị sẽ được lưu vào cột 'option_value' của bảng 'wp_options'
            $expiration (integer): The maximum of seconds to keep the data before refreshing.
                Transients may expire before the $expiration (Due to External Object Caches, or database upgrades) 
                    but will never return their value past $expiration.
                Thời gian lưu trữ
        Fetching Transients
            get_transient( $transient )
        If the transient does not exist, or has expired, then get_transient() will return false
        Tham số:
            $transient: the unique slug used while saving the transient with set_transient().
        Removing Saved Transients
            delete_transient( $transient )
            Our transient will die naturally of old age once $expiration seconds have passed since we last ran set_transient(), 
                but we can force the transient to die early by manually deleting it. This is useful for times when a given activity 
                (saving a post, adding a category etc.) will make the cached data inherently stale and in need of updating.
            -> Cho vào update() của Widget
        Tham số:
            $transient: the unique name used when saving with set_transient().
Shortcode API
    About Shortcode
        https://developer.wordpress.org/apis/handbook/shortcode/
        Hỗ trợ thêm các tiện ích mở rộng vào trong các bài viết hoặc các mã nguồn PHP
        Shortcode API functions list:
            Function: do_shortcode()
            Function: add_shortcode()
            Function: remove_shortcode()
            Function: remove_all_shortcodes()
            Function: shortcode_atts()
            Function: strip_shortcodes()
            Function: shortcode_exists()
            Function: has_shortcode()
            Function: get_shortcode_regex()
            Function: wp_audio_shortcode()
            Function: wp_video_shortcode()
            Filter: no_texturize_shortcodes
    Shortcode API 1
        Khi đoạn mã shortcode gắn vào 1 vị trí nào trong bài viết thì lúc đó nó sẽ gọi đến hàm thực thi
            tương ứng
    Shortcode API 2
        Viết 1 class để quản lý các shortcode
    Shortcode API 3
        remove_shortcode( string $tag )
            Removes hook for shortcode.
        add_shortcode('zendvn_mp_sc_date', '__return_false')
            Loại bỏ đi mã shortcode trong bài viết khi shortcode đang bị tắt
        shortcode_exists( string $tag )
            Whether a registered shortcode exists named $tag
            Kiểm tra xem shortcode đó đã được đăng ký vào hệ thống hay chưa
        has_shortcode( string $content, string $tag )
            Whether the passed content contains the specified shortcode
            Kiểm tra xem trong 1 nội dung nào đó shortcode có được thêm vào hay không 
    Shortcode API 4
        is_single( int|string|int[]|string[] $post = '' )
            Determines whether the query is for an existing single post.
            Để kiểm tra xem có đang xem 1 bài viết hay không            
        shortcode có tham số 
            Các bài viết lên quan đến Triều Tiên
                15. Quan hệ Trung – Triều: Môi hở trên răng lạnh
                    id=47
                12. Triều Tiên đóng biên giới vì sợ lây Ebola
                    id=41
                6. Triều Tiên chế được đầu nổ hạt nhân vừa tên lửa đạn đạo
                    id=24
            [zendvn_mp_sc_titles ids='47,41,24' title='Các bài viết lên quan đến Triều Tiên']
    Shortcode API 5
        post__in (array) – use post ids. Specify posts to retrieve. ATTENTION If you use sticky posts, they will be 
            included (prepended!) in the posts you retrieve whether you want it or not. To suppress this behaviour use ignore_sticky_posts.
    Shortcode API 6
        strip_shortcodes( string $content )
            Remove all shortcode tags from the given content.
            Loại bỏ shortcode trong 1 nội dung nào đó 
        shortcode_atts( array $pairs, array $atts, string $shortcode = '' )
            Combine user attributes with known attributes and fill in defaults when needed.
            Gắn giá trị mặc định vào trong 1 shortcode nào đó 
        get_shortcode_regex( array $tagnames = null )
            Retrieve the shortcode regular expression for searching.
    Shortcode API 7
        do_shortcode( string $content, bool $ignore_html = false )
            Search content for shortcodes and filter shortcodes through their hooks.
            Thông thường shortcode dùng để đưa vào các bài viết để hiển thị các phần nội dung mong muốn.
            do_shortcode() có thể đưa shortcode vào các mã nguồn PHP của các phần mở rộng trong WordPress để nó hiển thị ra
        wp_audio_shortcode( array $attr, string $content = '' )
            Builds the Audio shortcode output.
            This implements the functionality of the Audio Shortcode for displaying WordPress mp3s in a post.
            Giúp nhúng 1 tập tin Audio vào trong bài viết 
            [audio 'src'='http://wordpress.xyz/wp-content/uploads/2020/10/Westlife.mp3' 'loop'='' 'autoplay'='' 'preload'='none']
        wp_video_shortcode( array $attr, string $content = '' )
            Builds the Video shortcode output.
            This implements the functionality of the Video Shortcode for displaying WordPress mp4s in a post.
            http://wordpress.xyz/wp-content/uploads/2020/10/video.mp4
            [video 'src'='http://wordpress.xyz/wp-content/uploads/2020/10/video.mp4' 'preload'='metadata' 'width'=640 'height'=360 'class'='wp-video-shortcode']
Meta boxes & Metadata
    About Metadata
        Đây là phần rất quan trọng để thêm vào 1 số phần có sẵn ở trong WordPress như: Posts, Pages, Comments...
        Access:
            Posts -> Add New -> More Tools and Options -> Options
    Basic
        add_meta_box(
            $id,
            $title,
            $callback,
            $screen = null
        ) { }
            @param string $id — Meta box ID (used in the 'id' attribute for the meta box).
            @param string $title — Title of the meta box.
            @param callable $callback
                Function that fills the box with the desired content. The function should echo its output.
                Hàm này sẽ hiển thị nội dung của Metabox
            @param string|array|WP_Screen $screen
                Optional. The screen or screens on which to show the box (such as a post type, 'link', or 'comment'). 
                Accepts a single screen ID, WP_Screen object, or array of screen IDs. Default is the current screen. 
                If you have used add_menu_page() or add_submenu_page() to create a new screen (and hence screen_id), 
                make sure your menu slug conforms to the limits of sanitize_key() otherwise the 'screen' menu may not correctly 
                render on your page.
    Form 1
    Form 2
        save_post hook
        do_action( 'save_post', int $post_ID, WP_Post $post, bool $update )
        http://wordpress.xyz/?p=121
        update_post_meta(
            $post_id,
            $meta_key,
            $meta_value
        ) { }
            @param int $post_id — Post ID.
                id của post
            @param string $meta_key — Metadata key.
                Giá trị được lưu vào trường 'meta_key' của bảng wp_postmeta
            @param mixed $meta_value — Metadata value. Must be serializable if non-scalar.
                Giá trị được lưu vào trường 'meta_value' của bảng wp_postmeta
    Form 3
        sanitize_text_field($str): Sanitizes a string from user input or from the database
            Checks for invalid UTF-8,
            Converts single < characters to entities
            Strips all tags
            Removes line breaks, tabs, and extra whitespace
            Strips octets
            -> Làm sạch dữ liệu
        get_post_meta($post_id, $key = '', $single = false)
            Retrieves a post meta field for the given post ID
            $single = true: Dữ liệu được lấy ra ở dạng chuỗi, khi là mảng thì có giá trị là false 
        strip_tags($str, $allowable_tags = null)
            Strip HTML and PHP tags from a string
    Form 4
    Form 5
        wp_nonce_field(
            $action = -1,
            $name = '_wpnonce',
            $referer = true,
            $echo = true
        ) 
            Retrieve or display nonce hidden field for forms.
        wp_verify_nonce($nonce, $action = -1) { }
            Verifies that a correct security nonce was used with time limit.
        if(defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) return $post_id;
            Khi bài viết được tự động lưu thì sẽ không lưu phần Metabox
        current_user_can($capability, ...$args) { }
            Kiểm tra quyền hạn của user
    Editor 1
        Đưa text Editor vào trong phần Metabox
        wp_editor($content, $editor_id, $settings = array()) { }
            Renders an editor.
        wp_filter_post_kses($data) { }
            Sanitizes content for allowed HTML tags for post content
            Phương thức này cho phép lọc nội dung của editor
    Editor 2
    Media 1
    Media 2
        https://wordpress.stackexchange.com/questions/190147/tb-show-not-showing-a-media-upload-window-custom-plugin/223244
        esc_url($url, $protocols = null, $_context = 'display') { }
            Checks and cleans a URL.
            A number of characters are removed from the URL. If the URL is for displaying (the default behaviour) ampersands 
                are also replaced. The {@see 'clean_url'} filter is applied to the returned cleaned URL.
            @param string $url — The URL to be cleaned.
            @param string[] $protocols
                Optional. An array of acceptable protocols. Defaults to return value of wp_allowed_protocols().
            @param string $_context — Private. Use esc_url_raw() for database usage.
            @return string — The cleaned URL after the {@see 'clean_url'} filter is applied.
    Media 3
    Meta boxes frontend 1
        Hiển thị Metabox ở phía ngoài Frontend
        WordPress child theme
        https://developer.wordpress.org/themes/advanced-topics/child-themes/
        Active My Theme - Twenty Ten Child
    Meta boxes frontend 2
        get_the_ID()
            Retrieve the ID of the current item in the WordPress Loop.
        Có thể sử dụng Metabox cho phần page
            add_meta_box($this->_meta_box_id, 'My Data', array($this,'display'),'page');
        https://tcd-theme.com/2018/06/how-to-make-child-theme.html
The Loop & Custimizing the Loop
    About Loop
        https://codex.wordpress.org/the_loop
        Khi làm theme cho WordPress thì ko cần viết lại các câu truy vấn để lấy ra 1 hay nhiều bài viết...
            mà WordPress đã tạo sẵn các câu sql và trả về cho ta dữ liệu và chỉ cần in ra trên các Theme có sẵn bằng The Loop
        The Loop có 2 loại là in ra 1 kết quả và in ra nhiều kết quả
            The Loop trong loop-single.php chỉ in ra 1 kết quả duy nhất 
            The Loop trong loop.php thì in ra nhiều kết quả
    Loop 1
        loop.php hiển thị danh sách các bài viết trong Home và Categories
    Loop 2
        Sau khi chạy vòng lặp xong thì nên hủy kết quả đi là wp_reset_query() và wp_reset_postdata() nhưng wp_reset_postdata() 
            thường hay được dùng hơn
        wp_reset_query()
            Destroys the previous query and sets up a new query.
            Hủy đi đối tượng wp_query và tạo ra đối tượng mới
        wp_reset_postdata()
            After looping through a separate query, this function restores the $post global to the current post in the main query.
            Khôi hủy đi đối tượng wp_query mà nó chỉ thiết lập lại các giá trị trong đối tượng đó mà thôi
    Loop 3
        Custom Loop: Chỉnh lại các giá trị mà WordPress đã cung cấp cho ta để hiển thị theo ý muốn
        Để thực hiển custom loop thì cần gán lại giá trị $arrQuery rồi khởi tạo đối tượng $wp_query
            $wp_query = new WP_Query($arrQuery);
        in_category($category, $post = null) { }
            Checks if the current post is within any of the given categories
            @param int|string|array $category — Category ID, name or slug, or array of said.
            @param int|object $post — Optional. Post to check instead of the current post.
            @return bool — True if the current post is in any of the given categories.
        get_query_var($var, $default = '') { }
            Retrieve variable in the WP_Query class.
    Loop 4
        Multiple Loops
        Sử dụng nhiều loop trên cùng 1 trang, sử dụng đối tượng $wp_query
        Hiển thị thêm các phần tử ở trang kế tiếp 
Global Variables
    https://codex.wordpress.org/Global_Variables
JavaScript & Ajax trong WordPress
    Sử dụng Ajax trong plugin
    https://codex.wordpress.org/AJAX_in_Plugins
    Ajax của WordPress được chia làm 2 phần là: admin và frontend
    Optimize Setting page 1
    